//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MIEConsole.FileService {
    using System.Runtime.Serialization;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EStatusOfOperation", Namespace="http://schemas.datacontract.org/2004/07/Server")]
    public enum EStatusOfOperation : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SUCCESSFULL = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FILEDOESNOTEXISTS = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FAILWHILEBACKUP = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FAILWHILECHANGEFILES = 3,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="FileService.IFileTransfer")]
    public interface IFileTransfer {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileTransfer/BackupAndChangeFiles", ReplyAction="http://tempuri.org/IFileTransfer/BackupAndChangeFilesResponse")]
        MIEConsole.FileService.EStatusOfOperation BackupAndChangeFiles(string filePath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileTransfer/BackupAndChangeFiles", ReplyAction="http://tempuri.org/IFileTransfer/BackupAndChangeFilesResponse")]
        System.Threading.Tasks.Task<MIEConsole.FileService.EStatusOfOperation> BackupAndChangeFilesAsync(string filePath);
        
        // CODEGEN: Generating message contract since the operation UploadFileToServer is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileTransfer/UploadFileToServer", ReplyAction="http://tempuri.org/IFileTransfer/UploadFileToServerResponse")]
        MIEConsole.FileService.UploadFileToServerResponse UploadFileToServer(MIEConsole.FileService.FileData request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileTransfer/UploadFileToServer", ReplyAction="http://tempuri.org/IFileTransfer/UploadFileToServerResponse")]
        System.Threading.Tasks.Task<MIEConsole.FileService.UploadFileToServerResponse> UploadFileToServerAsync(MIEConsole.FileService.FileData request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="FileData", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class FileData {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string fileName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public System.IO.Stream stream;
        
        public FileData() {
        }
        
        public FileData(string fileName, System.IO.Stream stream) {
            this.fileName = fileName;
            this.stream = stream;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class UploadFileToServerResponse {
        
        public UploadFileToServerResponse() {
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFileTransferChannel : MIEConsole.FileService.IFileTransfer, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FileTransferClient : System.ServiceModel.ClientBase<MIEConsole.FileService.IFileTransfer>, MIEConsole.FileService.IFileTransfer {
        
        public FileTransferClient() {
        }
        
        public FileTransferClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FileTransferClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FileTransferClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FileTransferClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public MIEConsole.FileService.EStatusOfOperation BackupAndChangeFiles(string filePath) {
            return base.Channel.BackupAndChangeFiles(filePath);
        }
        
        public System.Threading.Tasks.Task<MIEConsole.FileService.EStatusOfOperation> BackupAndChangeFilesAsync(string filePath) {
            return base.Channel.BackupAndChangeFilesAsync(filePath);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MIEConsole.FileService.UploadFileToServerResponse MIEConsole.FileService.IFileTransfer.UploadFileToServer(MIEConsole.FileService.FileData request) {
            return base.Channel.UploadFileToServer(request);
        }
        
        public void UploadFileToServer(string fileName, System.IO.Stream stream) {
            MIEConsole.FileService.FileData inValue = new MIEConsole.FileService.FileData();
            inValue.fileName = fileName;
            inValue.stream = stream;
            MIEConsole.FileService.UploadFileToServerResponse retVal = ((MIEConsole.FileService.IFileTransfer)(this)).UploadFileToServer(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<MIEConsole.FileService.UploadFileToServerResponse> MIEConsole.FileService.IFileTransfer.UploadFileToServerAsync(MIEConsole.FileService.FileData request) {
            return base.Channel.UploadFileToServerAsync(request);
        }
        
        public System.Threading.Tasks.Task<MIEConsole.FileService.UploadFileToServerResponse> UploadFileToServerAsync(string fileName, System.IO.Stream stream) {
            MIEConsole.FileService.FileData inValue = new MIEConsole.FileService.FileData();
            inValue.fileName = fileName;
            inValue.stream = stream;
            return ((MIEConsole.FileService.IFileTransfer)(this)).UploadFileToServerAsync(inValue);
        }
    }
}
